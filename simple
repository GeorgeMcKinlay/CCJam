local function require(file)
	return dofile(shell.resolve(file))
end

local SIMPLE_SCRIPT_DIR = shell.resolve("simplescript")
local Lexer = require("simplescript/lexer.lua")
local Interpreter = require("simplescript/interpreter.lua")

local localLexer = Lexer.new()
local localInterpreter = Interpreter.new()

local function isEmpty(line)
	return line:match("^%s-$") ~= nil
end

local function runString(str, clearLexer)
	if clearLexer == nil then clearLexer = false end
	if clearLexer then localLexer:clear() end
	local err = localLexer:tokenise(str)
	if err ~= nil then printError(err) end
	--[[local file = fs.open("parseTree.txt", "w")
	file.write(textutils.serialise(localLexer.parseTree))
	file.close()]]
	localInterpreter:interpret(localLexer.parseTree, true)
end

local function runFile(file)
	local f = fs.open(file, "r")
	if f == nil then error("File not found", 0) end
	local str = f.readAll()
	runString(str)
	f.close()
end

local packages = fs.list(shell.resolve("simplescript/pkgs"))
for i,v in ipairs(packages) do
	localInterpreter:loadPackage(shell.resolve("simplescript/pkgs") .. "/" .. v)	
end

local argv = { ... }
local argc = #argv

if argc ~= 0 then
	local file = argv[1]
	runFile(shell.resolve(file))
	return
end

if not fs.exists(SIMPLE_SCRIPT_DIR) or not fs.isDir(SIMPLE_SCRIPT_DIR) then
	printError("Couldn't find the simplescript core files!")
	return
end

local history = {}
local termColour = term.isColour() and colours.cyan or colours.white

term.setTextColour(termColour)
print("SimpleScript v1.0 Console")

local depth = 0

while true do
	local lines = {}
	term.setTextColour(termColour)
	write("> ")
	
	term.setTextColour(colours.white)
	local input = read(nil, history)
	if input:lower() == "exit" then break end
	table.insert(history, input)
	table.insert(lines, { ["line"] = input, ["depth"] = 0 })
	
	local moreExpected = localLexer:getStatement(input) ~= nil or localLexer:getLabel(input) ~= nil
	local depth = 1
	if moreExpected then
		while depth > 0 do
			for i=1,depth+1 do
				term.setTextColour(termColour)
				write(">")
			end
			write(" ")
			
			term.setTextColour(colours.white)
			local inp = read(nil, history)
			table.insert(history, input)
			
			if not isEmpty(inp) then
				if localLexer:getStatement(inp) or localLexer:getLabel(inp) then
					table.insert(lines, { ["line"] = inp, ["depth"] = depth })
					depth = depth + 1
				elseif not localLexer:getStatement(inp) then
					table.insert(lines, { ["line"] = inp, ["depth"] = depth })
				end
			else
				depth = depth - 1
			end
		end
	end
	
	local full = ""
	for i,v in ipairs(lines) do
		local l = ""
		for i=1,v.depth do
			l = l .. " " 
		end
		l = l .. v.line
		full = full .. l
		if i ~= #lines then full = full .. "\n" end
	end
	
	if full ~= nil then
		runString(full, true)
	end
end